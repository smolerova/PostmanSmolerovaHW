{
	"info": {
		"_postman_id": "67ce437c-1e98-4823-93e3-13a241347c91",
		"name": "Postman HW_2 Smolerova",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "task1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Проверить, что в body приходит правильный string.\", function () {\r",
							"    pm.expect(pm.response.text()).to.equals(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "task2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name в request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Nata\");\r",
							"});\r",
							"pm.test(\"Проверить, что age в ответе равно age в request \", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"30\");\r",
							"});\r",
							"pm.test(\"Проверить, что salary в ответе равно salary в request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"\r",
							"var reqData = request.data;\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name в request (name забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"pm.test(\"Проверить, что age в ответе равно age в request (age забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что salary в ответе равно salary в request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"console.log(jsonData.family);\r",
							"\r",
							"pm.test(\"Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+request.data.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nata",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "task3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"console.log(reqData);\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name в request (name забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"    });\r",
							"pm.test(\"Проверить, что age в ответе равно age в request (age забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"    });\r",
							"pm.test(\"Проверить, что salary в ответе равно salary в request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"    });\r",
							"    console.log(jsonData.family);\r",
							"\r",
							"    pm.test(\"Проверить, что у параметра dog есть параметры name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"    });\r",
							"    \r",
							"    \r",
							"    pm.test(\"Проверить, что у параметра dog есть параметры age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Проверить, что параметр name имеет значение Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"    });\r",
							"    pm.test(\"Проверить, что параметр age имеет значение 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(+'4');\r",
							"    });\r",
							"    \r",
							"\r",
							"    \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Rick&age=45&salary=4000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Rick"
						},
						{
							"key": "age",
							"value": "45"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"console.log(reqData);\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name в  request (name забрать из request)\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"    });\r",
							"\r",
							"pm.test(\"Проверить, что age в ответе равно age из request (age забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+reqData.age);\r",
							"    });\r",
							"    console.log(reqData.salary);\r",
							"\r",
							"    console.log(jsonData.salary);\r",
							"\r",
							"    console.log(jsonData.salary[0]);\r",
							"\r",
							"    console.log(jsonData.salary[1]);\r",
							"\r",
							"    console.log(jsonData.salary[2]);\r",
							"\r",
							"    pm.test(\"Проверить, что 0-й элемент параметра salary равен salary в request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+reqData.salary);\r",
							"    });\r",
							"\r",
							"     pm.test(\"Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql(+reqData.salary*2);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(+reqData.salary*3);\r",
							"    });\r",
							"\r",
							"    \r",
							"    pm.environment.set(\"name\",\"Kate\");\r",
							"\r",
							"    pm.environment.set(\"age\",\"50\");\r",
							"\r",
							"    pm.environment.set(\"salary\",\"1500\");\r",
							"     \r",
							"    console.log (\" Написать цикл который выведет в консоль по порядку элементы списка из параметра salary:\");\r",
							"\r",
							"    jsonData.salary.forEach(function(s) {\r",
							"        console.log(s);\r",
							"    });\r",
							"\r",
							"\r",
							"   jsonData.salary.forEach(s => console.log(s));\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"   \r",
							"   \r",
							"    \r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=name&age=50&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "name"
						},
						{
							"key": "age",
							"value": "50"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"salary\",\"1500\");\r",
							"\r",
							"pm.environment.set(\"name\",\"Kate\");\r",
							"\r",
							" pm.environment.set(\"age\",\"50\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"var reqData = request.data;\r",
							"console.log(reqData);\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Проверить, что json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"    });\r",
							"     pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Проверить, что json response имеет параметр person\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person');\r",
							"    });\r",
							"    pm.test(\"Проверить, что параметр start_qa_salary равен salary из request(salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(reqData.salary);\r",
							"    });\r",
							"    pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqData.salary*2);\r",
							"    });\r",
							"    pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData.salary*2.7);\r",
							"    });\r",
							"    pm.test(\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(reqData.salary*3.3);\r",
							"    });\r",
							"     pm.test(\"Проверить, что параметр qa_salary_after_3.5_years равен salary*3.3 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(reqData.salary*3.8);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary);\r",
							"    });\r",
							"\r",
							"pm.test(\"Проверить, что что параметр u_age равен age из request (age забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqData.age);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(reqData.salary*4.2);\r",
							"    });\r",
							"    console.log (\"Написать цикл который выведет в консоль по порядку элементы списка из параметра person.:\");\r",
							"\r",
							"   jsonData.person.u_name.forEach(function(s) {\r",
							"        console.log(s);\r",
							"    });\r",
							"\r",
							"\r",
							"   jsonData.person.u_name.forEach(s => console.log(s));\r",
							"\r",
							"console.log(\"----------------------------\");\r",
							"   Object.keys(jsonData.person).forEach(key => console.log(jsonData.person[key]));\r",
							"     \r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}